  

Design Pattern
------------------
<<<<<<< HEAD
singleton = static instance of class 
don't allow user to create default constructor 
create a static method 

class ABC {
    // Eager initialization of the singleton instance
    private static final ABC obj = new ABC();
    // Private constructor to prevent instantiation
    private ABC() {}
    // Public method to provide access to the singleton instance
    public static ABC getInstance() {
        return obj;
    }
}
public class Singleton {
    public static void main(String[] args) {
        ABC obj1 = ABC.getInstance();
        ABC obj2 = ABC.getInstance();
        System.out.println(obj1 == obj2); // Output: true (Same instance)
    }
}


Hibernate/JPA =====
-------------------------
Hibernate = this is an orm tool / JPA - this a specification (set of rule )

to perform any operation with database from java application we can do it by hibernate but for this we need 

Session -> session factory ()-> configuration (data source config ) u have to do it in config.xml

save , get 

in every save,update and delete  method we have to do session.beginTranscation(), session.getTranscation.commit()
=======
SINGLETON -:
A Singleton Class is a design pattern that ensures only one instance of the class exists throughout the application. It provides a global access point to that instance
This Singleton pattern is one of the most common design patterns in Java, especially used in logging, caching, configuration management, and database connections
1️. Make the Constructor Private - Prevents direct object creation
2. Create a Static Instance Variable - Ensures a single instance is shared
3. Provide a Public Static Method to Get the Instance  - Provides global access to the instance
>>>>>>> 700d7e3f1fa29023f263597bfbde908b4243fd1a


Collection Framework ===
------------------------
Cursor-----
we need to retrive the object one by one 
3 types
Enumration - to get object from old collection object , Enumration e=v.elements(); /// Only read access
iterator - read and remove data // read and remove 
list iterator - bi directional / object creation = public ListIterator listIterator() //read , remove,replace , addition of new object 

Set -----
--------------------------
doesn't contain any method it extends all the collection interface method

HashSet====
----------------------------------------------
. Uderlying DS is Hashtable
. if frequent opration is search operation then go for it
. Insertion is not preserve

 Linked HashSet:-
 ===============================
Uderlying DS Hashtable+linkedlist
duplicate not allow and insertion order is preserve 


SortedSet -:
=======================
represet group of individual object where don't want duplicate data and some sorting order must be there 


TreeSet :-
=========================
Balanced Tree underlying DS
duplicate not allow , insertion order not preserve 
Heterogenious object not allow (Tree set and Tree Map)
Null Acceptance allow but only once / for empty treeset first element null insertion is possible . after inserting that , if try to insert other element will get null pointer exception 

TreeSet t= new TreeSet() = DNSO
TreeSet t =new TreeSet(Comparator c) ; cutomized sorting order 


comparable ----
------------
present on java.lang package / one method compareto
obj1.compareto(obj2); obj1- element we are trying to insert and obj2 is the element is already inserted 
obj1>obj2 = +ve
obj1<obj2 =-ve
obj1==obj2 = 0

Comparator --
-------------
present on java.util package 
customize sorting order /contains 2 method compare and equal , when we are implementing comparator interface must be override compare method , equal method is optional 


Interface and Abstract class

1. When we don't know about full Implimation we go for interface / when we know partial implementation go for abstract 
2. interface is fully abstract class because only abstract method allow / we can write both concert and abstract method 
3. all the methods are public and abstract / abstract class here is no specificatio 
4. in interface variable can be final public static / abstract class does n't have this type of specification
5. when we are declare a variable should intialize same time / abstract class this type specification not there 
6. we can't have static block here / here we have 


Map===========
-----------------------

Represent group of individual object in key value pair , both key and value both are object , key can't be duplicate , value can be duplicate 
Each key value pair called - Entry --- Hence map is considered as a collection of entry objecs 
Map Interface methods - object  put(object key , object value )
---- to add 1 key value pair to map , if the key is already present then old value will be repalced with new value and returns old value 
eg . map.put(101,"Sunit");
     map.put(102,"Kumar");
	 map.put(101,"Pattnaik")
	 then sunit will be replaced by pattnaik 
	 
-------------------------------------------------------------------
set keyset()
collection values()
set entryset()
these 3 method consider as collection view map 
-------------------------------------------------------------------------
Entry (I)
============
without existing map object , there is no chance of existing entry object , hence entry (I) is defined inside map interface 

object getkey();
object getvalue();
object setvalue(object o)
these 3 methods are entry specific method , we can apply on entry object 

HashMap
================

-- Underlying DS is HashTable , Insertion order is not preserved and it is bases on  hashcode of keys , Duplicate keys are not allowed , value can be duplicated 
-- Heterogenous object are allowed for both key and value , null allowed for key (once ) null allowed for value (any)
-- hashmap implements seralizable and cloneable inteface , but not random access 
-- hashmap is best choice if operation is search operation 

HashMap m = new HashMap() // creates an empty hashmap object with default intial capacity 16 and fill ratio is 0.75
HashMap m =new HashMap(int intialcapacity) - creates an empty hashmap object with specified intial capacity and default fill ratio 0.75
Hahmap m =new HashMap(int intialcapcity,float fill ratio)
HashMap m =new hashmap(Map m)


Differnce Between HashMap and HashTable ====
=========================================================================

1--HashMap method are not syncronized and Hastable is Syncronized 
2--Hashmap is multi threaded  so no thread safe / Hashtable is Single Thread and Thread safe 
3--HashMap is performance wise fast / Hastable performance wise slow
4-- Null value are allow / null are not allow
5-- HashMap came in 1.2 v / Hastable came on 1.0 v so it is legacy 

Linked HashMap============
===================================================================
1-uderlying Ds linkedlist+Hastable  / Child class of HashMap
2- insertion order is preserve
3- introduce in 1.4 v 


== & .equal()--
================================
1- == meant for refernce and address comparison / equal () content comparison 

IdentityHashMap===============
=====================================================================
Hashmap use .equal() to identityfy duplicate key 
- but identityhashmap jvm will use == operator to identityfy duplicate key 

WeakHashMap--------
===============================
- It is exactly same as hashmap except the following differnce 
-- In the case of hashmap even though object doesn't have any refernce it is not eligble for GC , if it is associated with HashMap i.e HashMap dominates GC 
-- But in the case of WeakHashMap if object doesnt contain any refernces it is eligble for GC even though object associated with weak hashmap , i.e gc dominates WeakHashMap

sorted map---
--------------
-if we want to represent group of key and value pair according to some sorting order of keys then we should go for sorted map ,sorting is based on key not value 
- Sorted Map defines the following specific methods 

Object firstKey();
Object lastKey();
SortedMap headMap(Object key)
SortedMap tailMap(Object key)
SortedMap subMap(Object key1,Object key2)
Comparator comparator()


TreeMap----
===================================================

-Uderlying Ds is Red Black Tree 
-Insertion is not preserved and it is based on some sorting order of keys 
-Duplicate keys are not allowed but values can be duplicated 
-if we are depending on default natural sorting order then keys should be homogenous and comparable otherwise we will get run time exception saying class cast exception
- if we are defining our own sorting by comparator then keys need not be homogenous and comparable , we can take heterogenous and non comparable object also 

Null Acceptance==
------------
For non empty treemap if we are trying to insert an entry with null key then we will get run time exception saying null pointer exception
for empty treemap as the first entry with null key is allowed , but after inserting that entry if we are trying to insert any other entry then we will get run time exception saying
null pointer exception
Note=== the above null acceptance rule applicable util 1.6 V only , from 1.7V onwards null is not allowed for key 
for value we can use null any where and any time 

Constructor==
------------

1. TreeMap t = new TreeMap() // elements will be inserted with d.n.s
2. Treemap t=new treemap(comparator) // customized sorting order 
3. TreeMap t = new TreeMap(Map m);
4. TreeMap t= new TreeMap (sortedMap m) 
Navigable MaP
------------------
child interface of sorted map , define some util method for navigation 


Hashtable-
=====================
1. Underlying ds for hashtable is hastable 
2. Insertion order is not preserved and it is based on hashcode of keys 
3.Duplicate keys are not allowed and values can be duplicated 
4.Heterogenous object are allow for the both keys and values 
5. null is not allow for both key and value otherwise we will get run time exception saying null pointer exception 
6.it implements serializable and cloneable interfaces but not random access 
7.Every method present in hashtable is synchronized and hence hashtable object is thread safe 
8.Hashtable is best choice if our frequent operation is search operation 

Constructors --
---------------------
HashTable h =new Hashtable();
HashTable h =new Hashtable(int intialcapacity);
HashTable h =new Hashtable(int intialcapacity,float ratio);
HashTable h =new Hashtable(Map m);

Properties---
======================
In our program , which is changes frequently (like username , password , mailid , mobile number etc....) are not recommended to hard code in java program because if there is 
any change to reflect that change recompilention , rebuild and redeploy application are required even sometimes server restart also required which creates a big impact to client
we can overcome this problem by using properties file , such type of variable things we have to configure in the properties file 
from that properties file we have to read into java program and we can use those properties , the main advantage of these approach is if there is a change in properties file to reflect
that change just redeployment is enough which won't create any business impact to client .
we can use java properties object to hold properties which are coming from properties file .

In normal map (hashmap,hastable, treemap ) key and value can be any type but in case of properties key and value should be string type 

Properties p =new Properties(); ----- Constructor 

Method ==
========
String setPropertyOf(String pname, String pvale) / set new property

if specified already availble then old value replaced with new value and returns old value 
String getPropertyOf(String pname) /get value associated with specified property  / if the specified property not availbe then this method return null 

Enumaration propertyNames() / return all property names present name properties object 

void load (inputStream Is) / to load properties from properties file into java properties object 
void store (outputStream os)/ to store properties from java properties into properties file 





Concorent Collection in Java 
------------------------------
1.HashMap
2.HashTable
3.Synchronized HashMap
4.Concuurent HashMap




Q - HashMap Internal Implementation ?
Ans - HashMap Stores key value pair in an array , each element is bucket , use hash function to determine which bucket key is use for retrive data ,if 2 key endup 
same bucket then collision happen then hashmap manage this collision by using the linkedlist or balance tree 

 
Q - What is the differnce between Throw and Throws KeyWord?
Ans - Throw 
1. Throw keyword use inside method 
2.It is used to explicitly throw an exception .
3.If we are thorwing an exception using throw keyword then we must throw it using throws or handle it using  try and catch block 

Throws -
1. used in method signature .
2. we use throws keyword to declare exception that might occure from method body .
3.we can decalre multiple exception using throws keyword .

Q - What is the differnce between This and Super ?
Ans - This -
1.This refer current class instance 
2.this is used call the constructor of same class

Super -
1.super refer the current instance of parent class
2.It is used to call the parent class constructor 


Q - How can i create own arraylist and which doesn't contain duplicate ?

public class myArrayList extends ArrayList{

public boolean add (Object o)
{
if(this.contains(o)){
return true;}
else {
return super.add(o);
}
}
psvm(String[] args)
 myArrayList ml= new myArrayList();
 m1.add(1);
 m1.add(1);
 m1.add(1);
 m1.add(2);
 s.o.p(m1); 
 }
 it won't take any duplicate element because we are writing our own method 
 
Q- Why set doesn't allow duplicate element ?
Ans - Set implementation internally use a map to store object as a key we know map key doesn't allow duplicate key . 

Q- What is fail fast and fail safe iterator ?
Ans - A iterator which will fail fast when we do any modification while iterating a collection is called fail fast iterator .
      Iterator which allow us to do modify in middle while iterating a collection is called non fail fast iterator .


Q - What is the differnce between equal and hashcode method?
Ans - Hashcode represent the unique or refernce number of an object through which we can easily identify uniqueness of an object 
    - Equal used to compare the object based on its content 
	
	
Q- How you can create custom exception ?
Ans - Create a class extend it from exception or runtime exception class and write the default constructor and pass the message .

Q- How can you write own custome immutable class ?
Ans - Make you class final , declare all the instances varibale with private and final . say no to settermethod , intialize all varibale in constructor 

Q- Differnce Between Serialization and Deserialization ?
Ans - Serialization - Converts an object into a storable or transferable format. Deserialization - Converts the serialized format back into an object.